#define CAN_FRAME_ID 0x01   // Frame ID for the shared data
#define BOARD_1_ID 0x01     // Board 1 writes to byte 0 and 1
#define BOARD_2_ID 0x02     // Board 2 writes to byte 2 and 3
#define BOARD_3_ID 0x03     // Board 3 writes to byte 4 and 5

#include <CAN.h>

void setup() {
    Serial.begin(115200);

    // Initialize CAN at 500 kbps
    if (!CAN.begin(500E3)) {
        Serial.println("CAN initialization failed!");
        while (1);
    }

    Serial.println("CAN started on Board 1.");
}

void loop() {
    // Board 1 initiates by sending its temperature value
    int temperature = readTemperature();  // Dummy temperature function

    // Create CAN frame
    byte message[8] = {0};
    message[0] = (temperature >> 8) & 0xFF;  // High byte
    message[1] = temperature & 0xFF;         // Low byte

    // Send the frame on the bus
    CAN.beginPacket(CAN_FRAME_ID);  // Shared CAN frame ID
    for (int i = 0; i < 8; i++) {
        CAN.write(message[i]);
    }
    CAN.endPacket();

    Serial.println("Temperature sent from Board 1.");

    delay(500);  // Delay to avoid spamming the bus
}

// Dummy temperature reading function
int readTemperature() {
    return random(0, 65535); // Simulated temperature value
}

2
#include <CAN.h>

void setup() {
    Serial.begin(115200);

    if (!CAN.begin(500E3)) {
        Serial.println("CAN initialization failed!");
        while (1);
    }

    Serial.println("CAN started on Board 2.");
}

void loop() {
    if (CAN.parsePacket()) {
        if (CAN.packetId() == CAN_FRAME_ID) {  // Check the shared frame ID
            Serial.println("Frame received on Board 2.");

            // Read the frame and store the message
            byte message[8] = {0};
            for (int i = 0; i < 8; i++) {
                if (CAN.available()) {
                    message[i] = CAN.read();
                }
            }

            // Print the temperature value from Board 1
            int temperature = (message[0] << 8) | message[1];
            Serial.print("Temperature received: ");
            Serial.println(temperature);

            // Add voltage reading to byte 2 and 3
            int voltage = readVoltage();  // Dummy voltage function
            message[2] = (voltage >> 8) & 0xFF;  // High byte
            message[3] = voltage & 0xFF;         // Low byte

            // Wait until CAN bus is free and send the modified message
            CAN.beginPacket(CAN_FRAME_ID);
            for (int i = 0; i < 8; i++) {
                CAN.write(message[i]);
            }
            CAN.endPacket();

            Serial.println("Updated frame sent from Board 2.");
        }
    }

    delay(500);  // Avoid spamming the bus
}

// Dummy voltage reading function
int readVoltage() {
    return random(0, 65535);  // Simulated voltage value
}



3

#include <CAN.h>

void setup() {
    Serial.begin(115200);

    if (!CAN.begin(500E3)) {
        Serial.println("CAN initialization failed!");
        while (1);
    }

    Serial.println("CAN started on Board 3.");
}

void loop() {
    if (CAN.parsePacket()) {
        if (CAN.packetId() == CAN_FRAME_ID) {  // Check the shared frame ID
            Serial.println("Frame received on Board 3.");

            // Read the frame and store the message
            byte message[8] = {0};
            for (int i = 0; i < 8; i++) {
                if (CAN.available()) {
                    message[i] = CAN.read();
                }
            }

            // Print the temperature and voltage values from previous boards
            int temperature = (message[0] << 8) | message[1];
            int voltage = (message[2] << 8) | message[3];
            Serial.print("Temperature: ");
            Serial.println(temperature);
            Serial.print("Voltage: ");
            Serial.println(voltage);

            // Add current reading to byte 4 and 5
            int current = readCurrent();  // Dummy current function
            message[4] = (current >> 8) & 0xFF;  // High byte
            message[5] = current & 0xFF;         // Low byte

            // Wait until CAN bus is free and send the modified message
            CAN.beginPacket(CAN_FRAME_ID);
            for (int i = 0; i < 8; i++) {
                CAN.write(message[i]);
            }
            CAN.endPacket();

            Serial.println("Updated frame sent from Board 3.");
        }
    }

    delay(500);  // Avoid spamming the bus
}

// Dummy current reading function
int readCurrent() {
    return random(0, 65535);  // Simulated current value
}



